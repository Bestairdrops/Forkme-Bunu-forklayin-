/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "PaymentSplitterUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PaymentSplitterUpgradeable__factory>;
    getContractFactory(
      name: "VestingWalletUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestingWalletUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "TokenTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenTreasury__factory>;
    getContractFactory(
      name: "VestingByTimeBlockWalletUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestingByTimeBlockWalletUpgradeable__factory>;
    getContractFactory(
      name: "IERCMINTExt20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERCMINTExt20__factory>;
    getContractFactory(
      name: "ITokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenVault__factory>;
    getContractFactory(
      name: "VeTokenUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeTokenUpgradeable__factory>;
    getContractFactory(
      name: "VersionUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VersionUpgradeable__factory>;
    getContractFactory(
      name: "ExampleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleToken__factory>;
    getContractFactory(
      name: "VeExampleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeExampleToken__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "GameCoffer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GameCoffer__factory>;
    getContractFactory(
      name: "GameCofferPaymentSplitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GameCofferPaymentSplitter__factory>;
    getContractFactory(
      name: "USDTFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDTFaucet__factory>;
    getContractFactory(
      name: "XYGameUSDT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XYGameUSDT__factory>;
    getContractFactory(
      name: "TokenCENO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenCENO__factory>;
    getContractFactory(
      name: "TokenZOIC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenZOIC__factory>;
    getContractFactory(
      name: "TokenCoffer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenCoffer__factory>;
    getContractFactory(
      name: "TokenCofferPaymentSplitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenCofferPaymentSplitter__factory>;
    getContractFactory(
      name: "TokenDeposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenDeposit__factory>;
    getContractFactory(
      name: "TokenRedeem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenRedeem__factory>;
    getContractFactory(
      name: "VestingByTimeWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestingByTimeWallet__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "PaymentSplitterUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PaymentSplitterUpgradeable>;
    getContractAt(
      name: "VestingWalletUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestingWalletUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "TokenTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenTreasury>;
    getContractAt(
      name: "VestingByTimeBlockWalletUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestingByTimeBlockWalletUpgradeable>;
    getContractAt(
      name: "IERCMINTExt20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERCMINTExt20>;
    getContractAt(
      name: "ITokenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenVault>;
    getContractAt(
      name: "VeTokenUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeTokenUpgradeable>;
    getContractAt(
      name: "VersionUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VersionUpgradeable>;
    getContractAt(
      name: "ExampleToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleToken>;
    getContractAt(
      name: "VeExampleToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeExampleToken>;
    getContractAt(
      name: "Greeter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Greeter>;
    getContractAt(
      name: "GameCoffer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GameCoffer>;
    getContractAt(
      name: "GameCofferPaymentSplitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GameCofferPaymentSplitter>;
    getContractAt(
      name: "USDTFaucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDTFaucet>;
    getContractAt(
      name: "XYGameUSDT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XYGameUSDT>;
    getContractAt(
      name: "TokenCENO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenCENO>;
    getContractAt(
      name: "TokenZOIC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenZOIC>;
    getContractAt(
      name: "TokenCoffer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenCoffer>;
    getContractAt(
      name: "TokenCofferPaymentSplitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenCofferPaymentSplitter>;
    getContractAt(
      name: "TokenDeposit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenDeposit>;
    getContractAt(
      name: "TokenRedeem",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenRedeem>;
    getContractAt(
      name: "VestingByTimeWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestingByTimeWallet>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
